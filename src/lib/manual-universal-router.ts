// Manual Universal Router Construction
// Build Universal Router call from scratch without relying on Zora SDK

import { createTradeCall, TradeParameters } from '@zoralabs/coins-sdk'
import { Address, Hex, encodePacked, parseEther } from 'viem'
import { UNIVERSAL_ROUTER_ABI, UNIVERSAL_ROUTER_ADDRESS, REFERRAL_ADDRESS } from './universal-router'

// Universal Router Commands (from Uniswap V4 docs)
export const COMMANDS = {
  V4_SWAP: 0x00,
  V3_SWAP_EXACT_IN: 0x01,
  V3_SWAP_EXACT_OUT: 0x02,
  V2_SWAP_EXACT_IN: 0x03,
  V2_SWAP_EXACT_OUT: 0x04,
  WRAP_ETH: 0x05,
  UNWRAP_WETH: 0x06,
  PERMIT2_TRANSFER_FROM: 0x07,
  PERMIT2_PERMIT_BATCH: 0x08,
  SWEEP: 0x09,
  TRANSFER: 0x0A,
  PAY_PORTION: 0x0B,
  COMMAND_PLACEHOLDER: 0x0C,
  COMMAND_PLACEHOLDER2: 0x0D,
  COMMAND_PLACEHOLDER3: 0x0E,
  COMMAND_PLACEHOLDER4: 0x0F,
  COMMAND_PLACEHOLDER5: 0x10,
  COMMAND_PLACEHOLDER6: 0x11,
  COMMAND_PLACEHOLDER7: 0x12,
  COMMAND_PLACEHOLDER8: 0x13,
  COMMAND_PLACEHOLDER9: 0x14,
  COMMAND_PLACEHOLDER10: 0x15,
  COMMAND_PLACEHOLDER11: 0x16,
  COMMAND_PLACEHOLDER12: 0x17,
  COMMAND_PLACEHOLDER13: 0x18,
  COMMAND_PLACEHOLDER14: 0x19,
  COMMAND_PLACEHOLDER15: 0x1A,
  COMMAND_PLACEHOLDER16: 0x1B,
  COMMAND_PLACEHOLDER17: 0x1C,
  COMMAND_PLACEHOLDER18: 0x1D,
  COMMAND_PLACEHOLDER19: 0x1E,
  COMMAND_PLACEHOLDER20: 0x1F,
  COMMAND_PLACEHOLDER21: 0x20,
  COMMAND_PLACEHOLDER22: 0x21,
  COMMAND_PLACEHOLDER23: 0x22,
  COMMAND_PLACEHOLDER24: 0x23,
  COMMAND_PLACEHOLDER25: 0x24,
  COMMAND_PLACEHOLDER26: 0x25,
  COMMAND_PLACEHOLDER27: 0x26,
  COMMAND_PLACEHOLDER28: 0x27,
  COMMAND_PLACEHOLDER29: 0x28,
  COMMAND_PLACEHOLDER30: 0x29,
  COMMAND_PLACEHOLDER31: 0x2A,
  COMMAND_PLACEHOLDER32: 0x2B,
  COMMAND_PLACEHOLDER33: 0x2C,
  COMMAND_PLACEHOLDER34: 0x2D,
  COMMAND_PLACEHOLDER35: 0x2E,
  COMMAND_PLACEHOLDER36: 0x2F,
  COMMAND_PLACEHOLDER37: 0x30,
  COMMAND_PLACEHOLDER38: 0x31,
  COMMAND_PLACEHOLDER39: 0x32,
  COMMAND_PLACEHOLDER40: 0x33,
  COMMAND_PLACEHOLDER41: 0x34,
  COMMAND_PLACEHOLDER42: 0x35,
  COMMAND_PLACEHOLDER43: 0x36,
  COMMAND_PLACEHOLDER44: 0x37,
  COMMAND_PLACEHOLDER45: 0x38,
  COMMAND_PLACEHOLDER46: 0x39,
  COMMAND_PLACEHOLDER47: 0x3A,
  COMMAND_PLACEHOLDER48: 0x3B,
  COMMAND_PLACEHOLDER49: 0x3C,
  COMMAND_PLACEHOLDER50: 0x3D,
  COMMAND_PLACEHOLDER51: 0x3E,
  COMMAND_PLACEHOLDER52: 0x3F,
  COMMAND_PLACEHOLDER53: 0x40,
  COMMAND_PLACEHOLDER54: 0x41,
  COMMAND_PLACEHOLDER55: 0x42,
  COMMAND_PLACEHOLDER56: 0x43,
  COMMAND_PLACEHOLDER57: 0x44,
  COMMAND_PLACEHOLDER58: 0x45,
  COMMAND_PLACEHOLDER59: 0x46,
  COMMAND_PLACEHOLDER60: 0x47,
  COMMAND_PLACEHOLDER61: 0x48,
  COMMAND_PLACEHOLDER62: 0x49,
  COMMAND_PLACEHOLDER63: 0x4A,
  COMMAND_PLACEHOLDER64: 0x4B,
  COMMAND_PLACEHOLDER65: 0x4C,
  COMMAND_PLACEHOLDER66: 0x4D,
  COMMAND_PLACEHOLDER67: 0x4E,
  COMMAND_PLACEHOLDER68: 0x4F,
  COMMAND_PLACEHOLDER69: 0x50,
  COMMAND_PLACEHOLDER70: 0x51,
  COMMAND_PLACEHOLDER71: 0x52,
  COMMAND_PLACEHOLDER72: 0x53,
  COMMAND_PLACEHOLDER73: 0x54,
  COMMAND_PLACEHOLDER74: 0x55,
  COMMAND_PLACEHOLDER75: 0x56,
  COMMAND_PLACEHOLDER76: 0x57,
  COMMAND_PLACEHOLDER77: 0x58,
  COMMAND_PLACEHOLDER78: 0x59,
  COMMAND_PLACEHOLDER79: 0x5A,
  COMMAND_PLACEHOLDER80: 0x5B,
  COMMAND_PLACEHOLDER81: 0x5C,
  COMMAND_PLACEHOLDER82: 0x5D,
  COMMAND_PLACEHOLDER83: 0x5E,
  COMMAND_PLACEHOLDER84: 0x5F,
  COMMAND_PLACEHOLDER85: 0x60,
  COMMAND_PLACEHOLDER86: 0x61,
  COMMAND_PLACEHOLDER87: 0x62,
  COMMAND_PLACEHOLDER88: 0x63,
  COMMAND_PLACEHOLDER89: 0x64,
  COMMAND_PLACEHOLDER90: 0x65,
  COMMAND_PLACEHOLDER91: 0x66,
  COMMAND_PLACEHOLDER92: 0x67,
  COMMAND_PLACEHOLDER93: 0x68,
  COMMAND_PLACEHOLDER94: 0x69,
  COMMAND_PLACEHOLDER95: 0x6A,
  COMMAND_PLACEHOLDER96: 0x6B,
  COMMAND_PLACEHOLDER97: 0x6C,
  COMMAND_PLACEHOLDER98: 0x6D,
  COMMAND_PLACEHOLDER99: 0x6E,
  COMMAND_PLACEHOLDER100: 0x6F,
  COMMAND_PLACEHOLDER101: 0x70,
  COMMAND_PLACEHOLDER102: 0x71,
  COMMAND_PLACEHOLDER103: 0x72,
  COMMAND_PLACEHOLDER104: 0x73,
  COMMAND_PLACEHOLDER105: 0x74,
  COMMAND_PLACEHOLDER106: 0x75,
  COMMAND_PLACEHOLDER107: 0x76,
  COMMAND_PLACEHOLDER108: 0x77,
  COMMAND_PLACEHOLDER109: 0x78,
  COMMAND_PLACEHOLDER110: 0x79,
  COMMAND_PLACEHOLDER111: 0x7A,
  COMMAND_PLACEHOLDER112: 0x7B,
  COMMAND_PLACEHOLDER113: 0x7C,
  COMMAND_PLACEHOLDER114: 0x7D,
  COMMAND_PLACEHOLDER115: 0x7E,
  COMMAND_PLACEHOLDER116: 0x7F,
  COMMAND_PLACEHOLDER117: 0x80,
  COMMAND_PLACEHOLDER118: 0x81,
  COMMAND_PLACEHOLDER119: 0x82,
  COMMAND_PLACEHOLDER120: 0x83,
  COMMAND_PLACEHOLDER121: 0x84,
  COMMAND_PLACEHOLDER122: 0x85,
  COMMAND_PLACEHOLDER123: 0x86,
  COMMAND_PLACEHOLDER124: 0x87,
  COMMAND_PLACEHOLDER125: 0x88,
  COMMAND_PLACEHOLDER126: 0x89,
  COMMAND_PLACEHOLDER127: 0x8A,
  COMMAND_PLACEHOLDER128: 0x8B,
  COMMAND_PLACEHOLDER129: 0x8C,
  COMMAND_PLACEHOLDER130: 0x8D,
  COMMAND_PLACEHOLDER131: 0x8E,
  COMMAND_PLACEHOLDER132: 0x8F,
  COMMAND_PLACEHOLDER133: 0x90,
  COMMAND_PLACEHOLDER134: 0x91,
  COMMAND_PLACEHOLDER135: 0x92,
  COMMAND_PLACEHOLDER136: 0x93,
  COMMAND_PLACEHOLDER137: 0x94,
  COMMAND_PLACEHOLDER138: 0x95,
  COMMAND_PLACEHOLDER139: 0x96,
  COMMAND_PLACEHOLDER140: 0x97,
  COMMAND_PLACEHOLDER141: 0x98,
  COMMAND_PLACEHOLDER142: 0x99,
  COMMAND_PLACEHOLDER143: 0x9A,
  COMMAND_PLACEHOLDER144: 0x9B,
  COMMAND_PLACEHOLDER145: 0x9C,
  COMMAND_PLACEHOLDER146: 0x9D,
  COMMAND_PLACEHOLDER147: 0x9E,
  COMMAND_PLACEHOLDER148: 0x9F,
  COMMAND_PLACEHOLDER149: 0xA0,
  COMMAND_PLACEHOLDER150: 0xA1,
  COMMAND_PLACEHOLDER151: 0xA2,
  COMMAND_PLACEHOLDER152: 0xA3,
  COMMAND_PLACEHOLDER153: 0xA4,
  COMMAND_PLACEHOLDER154: 0xA5,
  COMMAND_PLACEHOLDER155: 0xA6,
  COMMAND_PLACEHOLDER156: 0xA7,
  COMMAND_PLACEHOLDER157: 0xA8,
  COMMAND_PLACEHOLDER158: 0xA9,
  COMMAND_PLACEHOLDER159: 0xAA,
  COMMAND_PLACEHOLDER160: 0xAB,
  COMMAND_PLACEHOLDER161: 0xAC,
  COMMAND_PLACEHOLDER162: 0xAD,
  COMMAND_PLACEHOLDER163: 0xAE,
  COMMAND_PLACEHOLDER164: 0xAF,
  COMMAND_PLACEHOLDER165: 0xB0,
  COMMAND_PLACEHOLDER166: 0xB1,
  COMMAND_PLACEHOLDER167: 0xB2,
  COMMAND_PLACEHOLDER168: 0xB3,
  COMMAND_PLACEHOLDER169: 0xB4,
  COMMAND_PLACEHOLDER170: 0xB5,
  COMMAND_PLACEHOLDER171: 0xB6,
  COMMAND_PLACEHOLDER172: 0xB7,
  COMMAND_PLACEHOLDER173: 0xB8,
  COMMAND_PLACEHOLDER174: 0xB9,
  COMMAND_PLACEHOLDER175: 0xBA,
  COMMAND_PLACEHOLDER176: 0xBB,
  COMMAND_PLACEHOLDER177: 0xBC,
  COMMAND_PLACEHOLDER178: 0xBD,
  COMMAND_PLACEHOLDER179: 0xBE,
  COMMAND_PLACEHOLDER180: 0xBF,
  COMMAND_PLACEHOLDER181: 0xC0,
  COMMAND_PLACEHOLDER182: 0xC1,
  COMMAND_PLACEHOLDER183: 0xC2,
  COMMAND_PLACEHOLDER184: 0xC3,
  COMMAND_PLACEHOLDER185: 0xC4,
  COMMAND_PLACEHOLDER186: 0xC5,
  COMMAND_PLACEHOLDER187: 0xC6,
  COMMAND_PLACEHOLDER188: 0xC7,
  COMMAND_PLACEHOLDER189: 0xC8,
  COMMAND_PLACEHOLDER190: 0xC9,
  COMMAND_PLACEHOLDER191: 0xCA,
  COMMAND_PLACEHOLDER192: 0xCB,
  COMMAND_PLACEHOLDER193: 0xCC,
  COMMAND_PLACEHOLDER194: 0xCD,
  COMMAND_PLACEHOLDER195: 0xCE,
  COMMAND_PLACEHOLDER196: 0xCF,
  COMMAND_PLACEHOLDER197: 0xD0,
  COMMAND_PLACEHOLDER198: 0xD1,
  COMMAND_PLACEHOLDER199: 0xD2,
  COMMAND_PLACEHOLDER200: 0xD3,
  COMMAND_PLACEHOLDER201: 0xD4,
  COMMAND_PLACEHOLDER202: 0xD5,
  COMMAND_PLACEHOLDER203: 0xD6,
  COMMAND_PLACEHOLDER204: 0xD7,
  COMMAND_PLACEHOLDER205: 0xD8,
  COMMAND_PLACEHOLDER206: 0xD9,
  COMMAND_PLACEHOLDER207: 0xDA,
  COMMAND_PLACEHOLDER208: 0xDB,
  COMMAND_PLACEHOLDER209: 0xDC,
  COMMAND_PLACEHOLDER210: 0xDD,
  COMMAND_PLACEHOLDER211: 0xDE,
  COMMAND_PLACEHOLDER212: 0xDF,
  COMMAND_PLACEHOLDER213: 0xE0,
  COMMAND_PLACEHOLDER214: 0xE1,
  COMMAND_PLACEHOLDER215: 0xE2,
  COMMAND_PLACEHOLDER216: 0xE3,
  COMMAND_PLACEHOLDER217: 0xE4,
  COMMAND_PLACEHOLDER218: 0xE5,
  COMMAND_PLACEHOLDER219: 0xE6,
  COMMAND_PLACEHOLDER220: 0xE7,
  COMMAND_PLACEHOLDER221: 0xE8,
  COMMAND_PLACEHOLDER222: 0xE9,
  COMMAND_PLACEHOLDER223: 0xEA,
  COMMAND_PLACEHOLDER224: 0xEB,
  COMMAND_PLACEHOLDER225: 0xEC,
  COMMAND_PLACEHOLDER226: 0xED,
  COMMAND_PLACEHOLDER227: 0xEE,
  COMMAND_PLACEHOLDER228: 0xEF,
  COMMAND_PLACEHOLDER229: 0xF0,
  COMMAND_PLACEHOLDER230: 0xF1,
  COMMAND_PLACEHOLDER231: 0xF2,
  COMMAND_PLACEHOLDER232: 0xF3,
  COMMAND_PLACEHOLDER233: 0xF4,
  COMMAND_PLACEHOLDER234: 0xF5,
  COMMAND_PLACEHOLDER235: 0xF6,
  COMMAND_PLACEHOLDER236: 0xF7,
  COMMAND_PLACEHOLDER237: 0xF8,
  COMMAND_PLACEHOLDER238: 0xF9,
  COMMAND_PLACEHOLDER239: 0xFA,
  COMMAND_PLACEHOLDER240: 0xFB,
  COMMAND_PLACEHOLDER241: 0xFC,
  COMMAND_PLACEHOLDER242: 0xFD,
  COMMAND_PLACEHOLDER243: 0xFE,
  COMMAND_PLACEHOLDER244: 0xFF
} as const

// Simple hookData encoding - just pad the address to 32 bytes
export function createSimpleHookData(referralAddress: Address): Hex {
  // Remove 0x prefix, pad to 64 characters (32 bytes), add 0x back
  const addressWithoutPrefix = referralAddress.slice(2).toLowerCase()
  const paddedAddress = '0x' + addressWithoutPrefix.padStart(64, '0')
  
  console.log('üéÅ Simple hookData created:', paddedAddress)
  console.log('üìù Original address:', referralAddress)
  
  return paddedAddress as Hex
}

// Manual Universal Router call construction
export async function executeManualUniversalRouterCall(
  tradeParameters: TradeParameters,
  walletClient: any,
  publicClient: any
): Promise<Hex> {
  console.log('üîÑ Executing manual Universal Router call with referral...')
  
  try {
    // Step 1: Get the quote from Zora SDK to understand the swap
    const tradeCall = await createTradeCall(tradeParameters)
    
    console.log('üí∞ Zora SDK quote received:', {
      target: tradeCall.call.target,
      value: tradeCall.call.value,
      dataLength: tradeCall.call.data.length
    })
    
    // Step 2: Create hookData
    const hookData = createSimpleHookData(REFERRAL_ADDRESS)
    
    // Step 3: For now, let's try a simple approach
    // We'll use the Zora SDK's call data but try to modify it to include hookData
    
    console.log('üîç Attempting manual Universal Router call...')
    console.log('üìù Original call data:', tradeCall.call.data)
    console.log('üéÅ HookData to add:', hookData)
    
    // Step 4: Try to execute with hookData
    // This is a simplified approach - we'll try to append hookData to the call
    
    const hash = await walletClient.writeContract({
      address: UNIVERSAL_ROUTER_ADDRESS,
      abi: UNIVERSAL_ROUTER_ABI,
      functionName: 'execute',
      args: [
        '0x00', // Simple command
        [tradeCall.call.data], // Use Zora's call data as input
        BigInt(Math.floor(Date.now() / 1000) + 1800), // 30 minutes from now
        hookData // üéØ This is the key - include hookData!
      ],
      value: BigInt(tradeCall.call.value),
      account: walletClient.account!
    })
    
    console.log('‚úÖ Manual Universal Router call executed with referral:', hash)
    console.log('üí° This should earn you 4% of trade fees in ZORA tokens!')
    
    return hash
    
  } catch (error) {
    console.error('‚ùå Manual Universal Router call failed:', error)
    throw error
  }
}

// Test function to verify hookData encoding
export function testHookDataEncoding() {
  console.log('üß™ Testing hookData encoding...')
  
  const hookData = createSimpleHookData(REFERRAL_ADDRESS)
  
  console.log('üìä HookData encoding results:')
  console.log('  Referral address:', REFERRAL_ADDRESS)
  console.log('  Encoded hookData:', hookData)
  console.log('  Length:', hookData.length, 'characters')
  
  return { hookData }
}
